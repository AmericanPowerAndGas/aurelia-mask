{"version":3,"file":"masked-input.js","sourceRoot":"","sources":["../src/masked-input.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,uDAAiF;AACjF,mCAAgE;AAEhE,+BAA+B,GAAY;IACvC,IAAI,IAAI,GAAG,GAAG,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;IAC7C,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;QAClB,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;IACrE,CAAC;IACD,MAAM,CAAmB,IAAI,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC;AAID,IAAa,WAAW;IAmCpB,qBAAY,OAAgB;QAA5B,iBAUC;QATG,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,cAAc,GAAG,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAjB,CAAiB,CAAC;QAC7C,IAAI,CAAC,YAAY,GAAG,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAf,CAAe,CAAC;QACzC,IAAI,CAAC,YAAY,GAAG,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAf,CAAe,CAAC;QACzC,IAAI,CAAC,YAAY,GAAG,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAf,CAAe,CAAC;QACzC,IAAI,CAAC,YAAY,GAAG,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAf,CAAe,CAAC;QACzC,IAAI,CAAC,aAAa,GAAG,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAhB,CAAgB,CAAC;IAC/C,CAAC;IAED,0BAAI,GAAJ;QACI,EAAE,CAAA,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAChD,CAAC;QACD,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACvE,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnE,CAAC;IAED,8BAAQ,GAAR;QACI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QACnE,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAC/D,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAC/D,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QACjE,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAC/D,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACjE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxC,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;QACxC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACjF,CAAC;IAED,sCAAgB,GAAhB;QACI,EAAE,CAAA,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,OAAO,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,YAAY,GAAsB,IAAI,CAAC,OAAQ,CAAC;QACzD,CAAC;QAAA,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,CAAA,CAAC;YAC9B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrD,CAAC;QAAA,IAAI,CAAA,CAAC;YACF,IAAI,CAAC,YAAY,GAAG,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5D,CAAC;IACL,CAAC;IAED,8BAAQ,GAAR;QACI,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QACtE,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAClE,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAClE,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QACpE,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAClE,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACxE,CAAC;IAED,sBAAI,oCAAW;aAAf;YACI,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;gBACrB,MAAM,CAAC,CAAC,CAAC;YACb,CAAC;YACD,IAAI,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC;YAC1C,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC;QACvB,CAAC;;;OAAA;IAED,sBAAI,oCAAW;aAAf;YACI,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;gBACrB,MAAM,CAAC,CAAC,CAAC;YACb,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QACrC,CAAC;;;OAAA;IAED,8BAAQ,GAAR,UAAS,CAAM;QACX,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;IACxD,CAAC;IAED,6BAAO,GAAP,UAAQ,CAAM;QAEV,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;QAEZ,IAAI,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC;QACvC,IAAI,QAAQ,GAAG,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QAC5C,IAAI,WAAW,GAAG,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAC;QAC7C,IAAI,aAAa,GAAG,QAAQ,GAAG,WAAW,CAAC;QAC3C,IAAI,eAAe,GAAG,IAAI,CAAC,kBAAkB,IAAI,CAAC,CAAC;QACnD,IAAI,UAAU,GAAG,IAAI,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;QAC/C,IAAI,WAAW,GAAG,eAAe,GAAG,CAAC,CAAC;QAGtC,IAAI,cAAc,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACnE,IAAI,WAAW,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,KAAK,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAK/E,IAAI,aAAa,GAAG,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;QAEhD,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;QAC5B,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACb,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC;QACX,CAAC;QACD,EAAE,CAAC,CAAC,cAAc,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC1C,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;YACxC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;YACnC,MAAM,CAAC;QACX,CAAC;QACD,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,aAAa,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;IAC1E,CAAC;IAED,sBAAI,wCAAe;aAAnB;YACI,EAAE,CAAA,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACjB,IAAI,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;gBAClC,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;gBAC5C,MAAM,CAAC,QAAQ,CAAC;YACpB,CAAC;YAAA,IAAI,CAAA,CAAC;gBACF,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3C,CAAC;QACL,CAAC;;;OAAA;IAED,sBAAI,2CAAkB;aAAtB;YACI,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7C,CAAC;;;OAAA;IAEO,sCAAgB,GAAxB,UAAyB,IAAI;QACzB,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAC5C,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAED,gCAAU,GAAV,UAAW,gBAAiC;QAAjC,iCAAA,EAAA,wBAAiC;QAExC,IAAI,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC;QAC/B,IAAI,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;QACxC,EAAE,CAAA,CAAC,gBAAgB,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAC9D,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;QAClC,CAAC;QACD,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC;QACnC,IAAI,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC;QACjC,IAAI,eAAe,GAAG,IAAI,CAAC,kBAAkB,IAAI,CAAC,CAAC;QACnD,IAAI,WAAW,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,IAAI,SAAS,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,GAAG,eAAe,CAAC,CAAC;QAChI,MAAM,CAAC,WAAW,CAAC;IACvB,CAAC;IAED,sCAAgB,GAAhB;QAEI,IAAI,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;QAClC,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC;QACnC,IAAI,eAAe,GAAG,IAAI,CAAC,kBAAkB,IAAI,CAAC,CAAC;QACnD,IAAI,WAAW,GAAG,CAAC,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC;IACvB,CAAC;IAED,gCAAU,GAAV;QAEI,IAAI,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;QAClC,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC3B,IAAI,eAAe,GAAG,IAAI,CAAC,kBAAkB,IAAI,CAAC,CAAC;QACnD,IAAI,WAAW,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,IAAI,GAAG,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,GAAG,eAAe,CAAC,CAAC;QACtH,MAAM,CAAC,WAAW,CAAC;IACvB,CAAC;IAED,6BAAO,GAAP,UAAQ,CAAM;QACV,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;QAEZ,IAAI,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC;QACvC,IAAI,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC3C,IAAI,QAAQ,GAAG,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QAC5C,IAAI,WAAW,GAAG,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAC;QAC7C,EAAE,CAAA,CAAC,WAAW,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAEpB,WAAW,GAAG,QAAQ,GAAC,CAAC,CAAC;QAC7B,CAAC;QACD,IAAI,aAAa,GAAG,QAAQ,GAAG,WAAW,CAAC;QAC3C,IAAI,eAAe,GAAG,IAAI,CAAC,kBAAkB,IAAI,CAAC,CAAC;QACnD,IAAI,WAAW,GAAG,eAAe,GAAG,CAAC,CAAC;QACtC,EAAE,CAAA,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,IAAI,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC;YAEzD,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;YACtC,EAAE,CAAA,CAAC,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBACxC,IAAI,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;gBAC9C,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;oBAC7C,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,QAAQ,GAAC,CAAC,CAAC,CAAC;oBAC/E,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;gBACvD,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACF,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,WAAW,GAAC,CAAC,CAAC,CAAC;oBACrF,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;gBACvD,CAAC;gBACD,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;YACxD,CAAC;YAAA,IAAI,CAAC,CAAC;gBACH,IAAI,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;gBAChE,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACtC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;gBACrD,CAAC;gBACD,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,GAAC,CAAC,CAAC,CAAC;gBAC7F,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;gBACnD,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YACrD,CAAC;QACL,CAAC;QAGD,IAAI,cAAc,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACnE,IAAI,WAAW,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,KAAK,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAK/E,IAAI,aAAa,GAAG,CAAC,cAAc,CAAC,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;QAEpE,EAAE,CAAA,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtC,IAAI,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YACpD,EAAE,CAAA,CAAC,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC;gBACxB,aAAa,EAAE,CAAC;YACpB,CAAC;YAED,EAAE,CAAA,CAAC,eAAe,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAEvE,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACjE,IAAI,QAAQ,GAAG,WAAW,CAAC,MAAM,GAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,eAAe,CAAC,CAAC;gBAC9E,QAAQ,GAAG,aAAa,GAAG,QAAQ,CAAC;YACxC,CAAC;YAAA,IAAI,CAAA,CAAC;gBACF,IAAI,iBAAiB,GAAG,aAAa,CAAC;gBACtC,IAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,iBAAiB,GAAC,eAAe,CAAC,CAAC;gBACxE,IAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC;gBAC3D,IAAI,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;gBACtC,EAAE,CAAA,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBAC/B,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;gBAC/C,CAAC;gBACD,EAAE,CAAA,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBAC7B,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,GAAC,SAAS,CAAC,MAAM,CAAC,CAAC;gBACjE,CAAC;gBACD,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;oBAC3C,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;gBAC/D,CAAC;gBACD,EAAE,CAAA,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACtC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;gBAC1D,CAAC;gBAAA,IAAI,CAAA,CAAC;oBAEF,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,eAAe,CAAC,CAAC;oBACzF,QAAQ,GAAG,aAAa,GAAG,QAAQ,CAAC;gBACxC,CAAC;gBACD,IAAI,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;gBAC/C,EAAE,CAAA,CAAC,OAAO,CAAC,MAAM,GAAG,eAAe,CAAC,CAAC,CAAC;oBAClC,IAAI,SAAS,GAAG,aAAa,GAAG,iBAAiB,CAAC;oBAClD,IAAI,IAAI,GAAG,cAAc,CAAC,MAAM,CAAC,aAAa,GAAC,OAAO,CAAC,MAAM,EAAE,eAAe,GAAC,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC;oBAC3G,IAAI,UAAU,GAAG,cAAc,CAAC,MAAM,CAAC,iBAAiB,EAAE,SAAS,CAAC,CAAC;oBACrE,WAAW,GAAG,SAAS,GAAG,UAAU,GAAG,OAAO,GAAG,IAAI,GAAG,SAAS,CAAC;oBAClE,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;gBACvD,CAAC;YACL,CAAC;QACL,CAAC;QAED,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAEpD,EAAE,CAAC,CAAC,cAAc,IAAI,IAAI,CAAC,gBAAgB,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;YACxC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;YACnC,MAAM,CAAC;QACX,CAAC;QAKD,EAAE,CAAA,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAE3E,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;YACrD,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,GAAC,CAAC,CAAC,CAAC,CAAC;QACtH,CAAC;QAED,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,IAAI,WAAW,KAAK,cAAc,CAAC,CAAC,CAAC;YAC3E,OAAO,cAAc,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAE,CAAC;gBAC3F,QAAQ,EAAE,CAAC;YACf,CAAC;YACD,OAAO,WAAW,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;gBACrG,QAAQ,EAAE,CAAC;YACf,CAAC;YACD,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAE3D,EAAE,CAAA,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC;gBAChB,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;oBACrB,WAAW,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,GAAG,WAAW,CAAC,SAAS,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;gBAC7F,CAAC;YACL,CAAC;QACL,CAAC;QAGD,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,aAAa,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;QACtE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IAChC,CAAC;IAED,+BAAS,GAAT,UAAU,QAAuB;QAC7B,EAAE,CAAA,CAAC,kBAAS,CAAC,QAAQ,CAAC,IAAI,iBAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,CAAE,CAAC;YAC9F,MAAM,CAAC;QACX,CAAC;QAED,EAAE,CAAA,CAAC,kBAAS,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,iBAAQ,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,QAAQ,CAAC,CAAE,CAAC;YAC9F,MAAM,CAAC;QACX,CAAC;QAED,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,QAAQ,IAAI,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC;YAChE,MAAM,CAAC;QACX,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,IAAI,QAAQ,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACjD,IAAI,CAAC,MAAM,CAAC,EAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;QAC5D,CAAC;QACD,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;IAC1B,CAAC;IAKD,oCAAc,GAAd,UAAe,GAAkB;QAE7B,EAAE,CAAA,CAAC,GAAG,IAAI,IAAI,CAAC;YAAC,GAAG,GAAG,EAAE,CAAC;QACzB,MAAM,CAAC,EAAE,GAAC,GAAG,CAAC;IAClB,CAAC;IAGD,oCAAc,GAAd,UAAe,GAAkB;QAG7B,EAAE,CAAA,CAAC,kBAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAChB,MAAM,CAAS,GAAG,CAAC;QACvB,CAAC;QACD,MAAM,CAAC,UAAU,CAAS,GAAG,CAAC,CAAC;IACnC,CAAC;IAED,6BAAO,GAAP,UAAQ,CAAM;QAEV,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;QAEZ,IAAI,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC;QACvC,IAAI,QAAQ,GAAG,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QAC5C,IAAI,WAAW,GAAG,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAC;QAC7C,IAAI,aAAa,GAAG,QAAQ,GAAG,WAAW,CAAC;QAC3C,IAAI,eAAe,GAAG,IAAI,CAAC,kBAAkB,IAAI,CAAC,CAAC;QACnD,IAAI,WAAW,GAAG,eAAe,GAAG,CAAC,CAAC;QAGtC,IAAI,cAAc,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACnE,IAAI,WAAW,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,KAAK,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAK/E,IAAI,aAAa,GAAG,CAAC,cAAc,CAAC,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;QAEpE,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;QAE5B,EAAE,CAAC,CAAC,cAAc,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC1C,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;YACxC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;YACnC,MAAM,CAAC;QACX,CAAC;QAGD,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,aAAa,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;QACtE,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACvE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;IACxD,CAAC;IAED,6BAAO,GAAP,UAAQ,CAAM;QAEV,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;QACZ,IAAI,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC;QAGvB,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC;QACX,CAAC;QAED,IAAI,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC;QACvC,IAAI,QAAQ,GAAG,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QAC5C,IAAI,WAAW,GAAG,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAC;QAC7C,IAAI,aAAa,GAAG,QAAQ,GAAG,WAAW,CAAC;QAC3C,IAAI,eAAe,GAAG,IAAI,CAAC,kBAAkB,IAAI,CAAC,CAAC;QACnD,IAAI,UAAU,GAAG,IAAI,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;QAC/C,IAAI,WAAW,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,IAAI,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC;QAEjE,IAAI,cAAc,GAAG,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC;QAEpC,IAAI,cAAc,GAAG,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC;QACnC,IAAI,WAAW,GAAG,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC;QAKjC,IAAI,aAAa,GAAG,CAAC,cAAc,IAAI,cAAc,CAAC,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;QAEtF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAGpD,EAAE,CAAC,CAAC,WAAW,IAAI,UAAU,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC;QACX,CAAC;QAED,EAAE,CAAC,CAAC,cAAc,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC1C,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;YACxC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;YACnC,MAAM,CAAC;QACX,CAAC;QAGD,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,aAAa,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;QACtE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IAChC,CAAC;IAED,mCAAa,GAAb,UAAc,WAAW,EAAE,aAAa,EAAE,QAAQ,EAAE,WAAW;QAE3D,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QACnC,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACnD,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACnC,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAEvD,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC1B,IAAI,CAAC,gBAAgB,GAAG,WAAW,CAAC;QAEpC,EAAE,CAAA,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,SAAS,CAAC;QACxC,CAAC;QAOD,EAAE,CAAC,CAAC,UAAU,IAAI,CAAC,QAAQ,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;YAC1C,QAAQ,GAAG,WAAW,GAAG,CAAC,CAAC;QAC/B,CAAC;QAED,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YAChB,QAAQ,EAAE,CAAC;QACf,CAAC;QAGD,QAAQ,GAAG,QAAQ,GAAG,WAAW,GAAG,WAAW,GAAG,QAAQ,GAAG,WAAW,GAAG,WAAW,GAAG,QAAQ,CAAC;QAGlG,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,IAAI,QAAQ,GAAG,WAAW,IAAI,QAAQ,GAAG,WAAW,EAAE,CAAC;YAC9F,QAAQ,IAAI,aAAa,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QACvC,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,aAAa,IAAI,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YACvG,QAAQ,EAAE,CAAC;QACf,CAAC;QACD,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;IAED,wCAAkB,GAAlB;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC;YACnB,MAAM,CAAC,CAAC,CAAC;QACb,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAC/E,CAAC;QACD,EAAE,CAAC,CAAO,QAAS,CAAC,SAAS,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,CAAO,QAAS,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACjE,CAAC;QACD,MAAM,CAAC,CAAC,CAAC;IACb,CAAC;IAED,+BAAS,GAAT,UAAU,CAAgB;QACtB,IAAI,cAAc,GAAG,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC;QACnC,IAAI,WAAW,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1C,IAAI,iBAAiB,GAAG,WAAW,GAAG,CAAC,IAAI,CAAC,CAAC;QAE7C,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACjB,OAAO,iBAAiB,IAAI,CAAC,EAAE,CAAC;gBAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;oBAI/C,IAAI,CAAC,QAAQ,GAAG,iBAAiB,CAAC;oBAClC,KAAK,CAAC;gBACV,CAAC;gBACD,iBAAiB,EAAE,CAAC;YACxB,CAAC;YACD,IAAI,CAAC,gBAAgB,GAAG,iBAAiB,KAAK,CAAC,CAAC,CAAC;QACrD,CAAC;IACL,CAAC;IAED,sCAAgB,GAAhB;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC;YACnB,MAAM,CAAC,CAAC,CAAC;QACb,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC;QAC5C,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAO,QAAS,CAAC,SAAS,CAAC,CAAC,CAAC;YACnC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;gBAEnB,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;gBAC1B,IAAI,SAAS,GAAS,QAAS,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;gBACxD,SAAS,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAChG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC;YACjC,CAAC;QACL,CAAC;QACD,MAAM,CAAC,CAAC,CAAC;IACb,CAAC;IAED,0CAAoB,GAApB,UAAqB,GAAG;QACpB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,CAAC;IAED,sCAAgB,GAAhB,UAAiB,GAAG;QAChB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC;YACnB,MAAM,CAAC,CAAC,CAAC;QACb,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC;QACX,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACtC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;gBAC1B,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YAClD,CAAC;QACL,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAO,IAAI,CAAC,YAAa,CAAC,eAAe,CAAC,CAAC,CAAC;YAEhD,IAAI,KAAK,GAAS,IAAI,CAAC,YAAa,CAAC,eAAe,EAAE,CAAC;YACvD,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACrB,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;YAChC,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;YAClC,KAAK,CAAC,MAAM,EAAE,CAAC;QACnB,CAAC;IACL,CAAC;IAED,+BAAS,GAAT;QACI,MAAM,CAAC,IAAI,CAAC,YAAY,KAAK,QAAQ,CAAC,aAAa,IAAI,CAAC,CAAC,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,EAAE,CAAC;YAC9F,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,IAAU,IAAI,CAAC,YAAa,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;IACnG,CAAC;IAED,8BAAQ,GAAR;QACI,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC;IACzF,CAAC;IAED,iCAAW,GAAX;QACI,IAAI,CAAC,MAAM,GAAG,kBAAS,CAAC;YACpB,UAAU,EAAE,IAAI,CAAC,IAAI;YACrB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,aAAa,EAAE,IAAI,CAAC,aAAa;SACpC,CAAC,CAAC;IACP,CAAC;IAED,kCAAY,GAAZ,UAAa,IAAI,EAAE,IAAI;QAEnB,IAAI,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,QAAQ,GAAG,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QAC5C,IAAI,WAAW,GAAG,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAC;QAC7C,IAAI,aAAa,GAAG,QAAQ,GAAG,WAAW,CAAC;QAC3C,IAAI,eAAe,GAAG,IAAI,CAAC,kBAAkB,IAAI,CAAC,CAAC;QACnD,IAAI,UAAU,GAAG,IAAI,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;QAM/C,IAAI,aAAa,GAAG,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;QAEhD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAGpD,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC;YAC9B,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YACtD,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YACtD,aAAa,GAAG,aAAa,IAAI,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;QAC7E,CAAC;QACD,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,aAAa,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;QACtE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IAChC,CAAC;IACL,kBAAC;AAAD,CAAC,AA3lBD,IA2lBC;AAxlByD;IAArD,4BAAQ,CAAC,EAAE,kBAAkB,EAAE,+BAAW,CAAC,MAAM,EAAE,CAAC;;0CAAsB;AACjE;IAAT,4BAAQ;;yCAAc;AACb;IAAT,4BAAQ;;4CAAiB;AAChB;IAAT,4BAAQ;;+CAAoB;AACnB;IAAT,4BAAQ;;6CAAmB;AAC+C;IAA1E,4BAAQ,CAAC,EAAE,kBAAkB,EAAE,+BAAW,CAAC,OAAO,EAAE,YAAY,EAAE,KAAK,EAAC,CAAC;;gDAAqB;AACpB;IAA1E,4BAAQ,CAAC,EAAE,kBAAkB,EAAE,+BAAW,CAAC,OAAO,EAAE,YAAY,EAAE,KAAK,EAAC,CAAC;;kDAAuB;AACvB;IAAzE,4BAAQ,CAAC,EAAE,kBAAkB,EAAE,+BAAW,CAAC,OAAO,EAAE,YAAY,EAAE,IAAI,EAAC,CAAC;;gDAAqB;AAChB;IAA7E,4BAAQ,CAAC,EAAE,kBAAkB,EAAE,+BAAW,CAAC,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAC,CAAC;;6CAAkB;AAG3F;IADH,4BAAQ,CAAC,EAAE,kBAAkB,EAAE,+BAAW,CAAC,OAAO,EAAE,YAAY,EAAE,IAAI,EAAC,CAAC;;8CAC5B;AACjC;IAAX,4BAAQ,EAAE;8BAAS,QAAQ;2CAAC;AAfpB,WAAW;IAFvB,mCAAe,CAAC,QAAQ,CAAC;IACzB,0BAAM,CAAC,OAAO,CAAC;qCAoCS,OAAO;GAnCnB,WAAW,CA2lBvB;AA3lBY,kCAAW","sourcesContent":["import {customAttribute, bindable, bindingMode, inject} from 'aurelia-framework';\nimport {getMasker, Masker, isNumeric, isString} from \"./masker\";\n\nfunction findFirstInputElement(elt: Element) {\n    var elts = elt.getElementsByTagName(\"input\");\n    if(elts.length == 0) {\n        throw new Error(\"'masked' attribute is not on an input element\");\n    }\n    return <HTMLInputElement>elts[0];\n}\n\n@customAttribute('masked')\n@inject(Element)\nexport class MaskedInput {\n    element: Element;\n    inputElement: HTMLInputElement;\n    @bindable({ defaultBindingMode: bindingMode.twoWay }) value: string|number;\n    @bindable mask: string;\n    @bindable inputId: string;\n    @bindable inputClass: string;\n    @bindable disabled: boolean;\n    @bindable({ defaultBindingMode: bindingMode.oneTime, defaultValue: false}) bindMasking: boolean\n    @bindable({ defaultBindingMode: bindingMode.oneTime, defaultValue: false}) aspnetMasking: boolean\n    @bindable({ defaultBindingMode: bindingMode.oneTime, defaultValue: null}) placeholder: string;\n    @bindable({ defaultBindingMode: bindingMode.oneTime, defaultValue: \"insert\"}) editMode: string;\n\n    @bindable({ defaultBindingMode: bindingMode.oneTime, defaultValue: null}) \n        findInput: (Element) => HTMLInputElement;\n    @bindable() change: Function;\n\n    masker: Masker;\n    preventBackspace: boolean;\n    oldValue: string;\n    oldValueUnmasked: string;\n    oldCaretPosition: number;\n    oldSelectionLength: number;\n    caretPos: number;\n\n    keyDownHandler: any;\n    keyUpHandler: any;\n    inputHandler: any;\n    clickHandler: any;\n    focusHandler: any;\n    selectHandler: any;\n\n    isAttached: boolean;\n\n\n    constructor(element: Element) {\n        this.isAttached = false;\n        this.element = element;\n        this.preventBackspace = false;\n        this.keyDownHandler = e => this.onKeyDown(e);\n        this.keyUpHandler = e => this.onKeyUp(e);\n        this.clickHandler = e => this.onClick(e);\n        this.inputHandler = e => this.onInput(e);\n        this.focusHandler = e => this.onFocus(e);\n        this.selectHandler = e => this.onSelect(e);\n    }\n\n    bind() {\n        if(this.mask == null) {\n            throw new Error(\"mask needs to be defined\");\n        }\n        this.maskChanged();\n        this.oldValue = this.masker.maskValue(this.numberToString(this.value));\n        this.oldValueUnmasked = this.masker.unmaskValue(this.oldValue);\n    }\n\n    attached() {\n        this.isAttached = true;\n        this.findInputElement();\n        this.inputElement.addEventListener(\"keydown\", this.keyDownHandler);\n        this.inputElement.addEventListener('keyup', this.keyUpHandler);\n        this.inputElement.addEventListener('input', this.inputHandler);\n        this.inputElement.addEventListener('mouseup', this.clickHandler);\n        this.inputElement.addEventListener('focus', this.focusHandler);\n        this.inputElement.addEventListener('select', this.selectHandler);\n        this.caretPos = this.getCaretPosition();\n        this.inputElement.value = this.oldValue;\n        this.updateUIValue(this.oldValue, false, this.minCaretPos, this.minCaretPos);\n    }\n\n    findInputElement() {\n        if(this.element.tagName.toLowerCase() === \"input\") {\n            this.inputElement = (<HTMLInputElement>this.element);\n        }else if (this.findInput != null){\n            this.inputElement = this.findInput(this.element);\n        }else{\n            this.inputElement = findFirstInputElement(this.element);\n        }\n    }\n\n    detached() {\n        this.inputElement.removeEventListener(\"keydown\", this.keyDownHandler);\n        this.inputElement.removeEventListener('keyup', this.keyUpHandler);\n        this.inputElement.removeEventListener('input', this.inputHandler);\n        this.inputElement.removeEventListener('mouseup', this.clickHandler);\n        this.inputElement.removeEventListener('focus', this.focusHandler);\n        this.inputElement.removeEventListener('select', this.selectHandler);\n    }\n\n    get maxCaretPos() {\n        if(this.masker == null) {\n            return 0;\n        }\n        let valUnmasked = this.unmaskedModelValue;\n        let caretPosMax = this.masker.maxCaretPos(valUnmasked);\n        return caretPosMax;\n    }\n\n    get minCaretPos() {\n        if(this.masker == null) {\n            return 0;\n        }\n        return this.masker.minCaretPos();\n    }\n\n    onSelect(e: any) {\n        this.oldSelectionLength = this.getSelectionLength();\n    }\n\n    onClick(e: any) {\n        /*jshint validthis: true */\n        e = e || {};\n\n        let valUnmasked = this.unmaskedUIValue;\n        let caretPos = this.getCaretPosition() || 0;\n        let caretPosOld = this.oldCaretPosition || 0;\n        let caretPosDelta = caretPos - caretPosOld;\n        let selectionLenOld = this.oldSelectionLength || 0;\n        let isSelected = this.getSelectionLength() > 0;\n        let wasSelected = selectionLenOld > 0;\n\n        // Necessary due to \"input\" event not providing a key code\n        let isKeyBackspace = (this.isDeletion() && (caretPosDelta === -1));\n        let isKeyDelete = (this.isDeletion() && (caretPosDelta === 0) && !wasSelected);\n        // Handles cases where caret is moved and placed in front of invalid maskCaretMap position. Logic below\n        // ensures that, on click or leftward caret placement, caret is moved leftward until directly right of\n        // non-mask character. Also applied to click since users are (arguably) more likely to backspace\n        // a character when clicking within a filled input.\n        let caretBumpBack = caretPos > this.minCaretPos;\n\n        this.oldSelectionLength = 0;\n        if (isSelected) {\n            this.oldCaretPosition = -1;\n            return;\n        }\n        if (isKeyBackspace && this.preventBackspace) {\n            this.inputElement.value = this.oldValue;\n            this.setCaretPosition(caretPosOld);\n            return;\n        }\n        this.updateUIValue(valUnmasked, caretBumpBack, caretPos, caretPosOld);\n    }\n\n    get unmaskedUIValue(): string {\n        if(this.isAttached) {\n            let val = this.inputElement.value;\n            let unmasked = this.masker.unmaskValue(val);\n            return unmasked;\n        }else{\n            return this.numberToString(this.value);\n        }\n    }\n\n    get unmaskedModelValue(): string {\n        return this.getUnmaskedValue(this.value);\n    }\n\n    private getUnmaskedValue(_val): string {\n        let val = this.numberToString(_val);\n        let unmasked = this.masker.unmaskValue(val);\n        return unmasked;\n    }\n\n    isAddition(doterriblethings: boolean = false) {\n        // Case: Typing a character to overwrite a selection\n        let val = this.unmaskedUIValue;\n        let maskedVal = this.inputElement.value;\n        if(doterriblethings && (this.bindMasking || this.aspnetMasking)) {\n            val = this.inputElement.value;\n        }\n        let valOld = this.oldValueUnmasked;\n        let oldMaskedVal = this.oldValue;\n        let selectionLenOld = this.oldSelectionLength || 0;\n        let _isAddition = (val.length > valOld.length) || (selectionLenOld && maskedVal.length > oldMaskedVal.length - selectionLenOld);\n        return _isAddition;\n    }\n\n    isSingleAddition() {\n        // Case: Typing a character to overwrite a selection\n        let val = this.inputElement.value;\n        let valOld = this.oldValueUnmasked;\n        let selectionLenOld = this.oldSelectionLength || 0;\n        let _isAddition = (val.length == valOld.length + 1);\n        return _isAddition;\n    }\n\n    isDeletion() {\n        // Case: Delete and backspace behave identically on a selection\n        let val = this.inputElement.value;\n        let valOld = this.oldValue;\n        let selectionLenOld = this.oldSelectionLength || 0;\n        let _isDeletion = (val.length < valOld.length) || (selectionLenOld && val.length === valOld.length - selectionLenOld);\n        return _isDeletion;\n    }\n\n    onInput(e: any) {\n        e = e || {};\n\n        let valUnmasked = this.unmaskedUIValue;\n        let valUnmaskedOld = this.oldValueUnmasked;\n        let caretPos = this.getCaretPosition() || 0;\n        let caretPosOld = this.oldCaretPosition || 0;\n        if(caretPosOld === -1) {\n            // case when was selected, click to unselect isn't being (can't be?) handled elsewhere properly, grr\n            caretPosOld = caretPos-1;\n        }\n        let caretPosDelta = caretPos - caretPosOld;\n        let selectionLenOld = this.oldSelectionLength || 0;\n        let wasSelected = selectionLenOld > 0;\n        if(this.isSingleAddition() && this.editMode === \"overtype\") {\n            // if user is holding a key down, we need to fix things up, because onKeyUp won't\n            valUnmasked = this.inputElement.value;\n            if(this.isValidCaretPosition(caretPosOld)) {\n                let newChar = valUnmasked.charAt(caretPosOld);\n                if(this.masker.isValidAt(newChar, caretPosOld)) {\n                    valUnmasked = valUnmasked.substr(0, caretPos) + valUnmasked.substr(caretPos+1);\n                    valUnmasked = this.masker.unmaskValue(valUnmasked);\n                }else{\n                    valUnmasked = valUnmasked.substr(0, caretPosOld) + valUnmasked.substr(caretPosOld+1);\n                    valUnmasked = this.masker.unmaskValue(valUnmasked);\n                }\n                caretPos = this.masker.getNextCaretPos(caretPosOld);\n            }else {\n                let newChar = this.inputElement.value.charAt(caretPosOld) || \"\";\n                if(!this.isValidCaretPosition(caretPos)) {\n                    caretPos = this.masker.getNextCaretPos(caretPos);\n                }\n                valUnmasked = this.oldValue.substr(0, caretPos) + newChar + this.oldValue.substr(caretPos+1);\n                valUnmasked = this.masker.unmaskValue(valUnmasked);\n                caretPos = this.masker.getNextCaretPos(caretPos);\n            }\n        }\n\n        // Necessary due to \"input\" event not providing a key code\n        let isKeyBackspace = (this.isDeletion() && (caretPosDelta === -1));\n        let isKeyDelete = (this.isDeletion() && (caretPosDelta === 0) && !wasSelected);\n        // Handles cases where caret is moved and placed in front of invalid maskCaretMap position. Logic below\n        // ensures that, on click or leftward caret placement, caret is moved leftward until directly right of\n        // non-mask character. Also applied to click since users are (arguably) more likely to backspace \n        // a character when clicking within a filled input.\n        let caretBumpBack = (isKeyBackspace) && caretPos > this.minCaretPos;\n\n        if(wasSelected && this.isAddition(true)) {\n            let startCaretPos = Math.min(caretPos, caretPosOld);\n            if(caretPos < caretPosOld) {\n                startCaretPos--; //??\n            }\n\n            if(selectionLenOld == this.oldValue.length && this.editMode === \"insert\") {\n                // value in inputElement might not be masked properly yet\n                let maskedValue = this.masker.maskValue(this.inputElement.value);\n                let newDelta = maskedValue.length -  (this.oldValue.length - selectionLenOld);\n                caretPos = startCaretPos + newDelta;\n            }else{\n                let oldSelectionStart = startCaretPos;\n                let oldSuffix = this.oldValue.substr(oldSelectionStart+selectionLenOld);\n                let oldPrefix = this.oldValue.substr(0, oldSelectionStart);\n                let newPart = this.inputElement.value;\n                if(newPart.startsWith(oldPrefix)) {\n                    newPart = newPart.substr(oldPrefix.length);\n                }\n                if(newPart.endsWith(oldSuffix)) {\n                    newPart = newPart.substr(0, newPart.length-oldSuffix.length);\n                }\n                if(!this.isValidCaretPosition(startCaretPos)) {\n                    startCaretPos = this.masker.getNextCaretPos(startCaretPos);\n                }\n                if(this.inputElement.value.length === 1) {\n                    caretPos = this.masker.getNextCaretPos(startCaretPos);\n                }else{\n                    // todo: this can still calculate caretPos wrong e.g. when user pastes into a partial selection\n                    let newDelta = this.inputElement.value.length - (this.oldValue.length - selectionLenOld);\n                    caretPos = startCaretPos + newDelta;\n                }\n                let allPlaceholder = this.masker.maskValue(\"\");\n                if(newPart.length < selectionLenOld) {\n                    let caretDiff = startCaretPos - oldSelectionStart;\n                    let fill = allPlaceholder.substr(startCaretPos+newPart.length, selectionLenOld-newPart.length - caretDiff);\n                    let fillPrefix = allPlaceholder.substr(oldSelectionStart, caretDiff);\n                    valUnmasked = oldPrefix + fillPrefix + newPart + fill + oldSuffix;\n                    valUnmasked = this.masker.unmaskValue(valUnmasked);\n                }\n            }\n        }\n\n        this.oldSelectionLength = this.getSelectionLength();\n\n        if (isKeyBackspace && this.preventBackspace && !wasSelected) {\n            this.inputElement.value = this.oldValue;\n            this.setCaretPosition(caretPosOld);\n            return;\n        }\n\n        // Value Handling\n        // ==============\n\n        if(this.isDeletion() && !wasSelected && !this.isValidCaretPosition(caretPos)) {\n            // need to delete whatever was before the punctuation\n            caretPos = this.masker.getPreviousCaretPos(caretPos);\n            valUnmasked = this.masker.unmaskValue(this.oldValue.substring(0, caretPos) + this.oldValue.substring(caretPos+1));\n        }\n        // User attempted to delete but raw value was unaffected--correct this grievous offense\n        else if (this.isDeletion() && !wasSelected && valUnmasked === valUnmaskedOld) {\n            while (isKeyBackspace && caretPos > this.minCaretPos && !this.isValidCaretPosition(caretPos)) {\n                caretPos--;\n            }\n            while (isKeyDelete && caretPos < this.maxCaretPos && this.masker.maskCaretMap.indexOf(caretPos) === -1) {\n                caretPos++;\n            }\n            var charIndex = this.masker.maskCaretMap.indexOf(caretPos);\n            // Strip out non-mask character that user would have deleted if mask hadn't been in the way.\n            if(charIndex != 0) {\n                if(!this.aspnetMasking) {\n                    valUnmasked = valUnmasked.substring(0, charIndex) + valUnmasked.substring(charIndex + 1);\n                }\n            }\n        }\n\n        // Update values\n        this.updateUIValue(valUnmasked, caretBumpBack, caretPos, caretPosOld);\n        this._setValue(valUnmasked);\n    }\n\n    _setValue(newValue: string|number) {\n        if(isNumeric(newValue) && isString(this.value) && this.numberToString(newValue) === this.value)  {\n            return;\n        }\n        \n        if(isNumeric(this.value) && isString(newValue) && this.numberToString(this.value) === newValue)  {\n            return;\n        }\n\n        if(!this.value && this.value !== 0 && !newValue && newValue !== 0) {\n            return;\n        }\n\n        if (this.change != null && newValue !== this.value) {\n            this.change({newValue: newValue, oldValue: this.value});\n        }\n        this.value = newValue;\n    }\n\n\n\n    // bad things happen if x != numberToString(stringToNumber(x))\n    numberToString(val: number|string): string {\n        // todo: allow user to customize \n        if(val == null) val = \"\";\n        return \"\"+val;\n    }\n\n    // bad things happen if x != stringToNumber(numberToString(x))\n    stringToNumber(val: number|string): number {\n        // todo: allow user to customize \n        // todo: what to do when this fails\n        if(isNumeric(val)) {\n            return <number>val;\n        }\n        return parseFloat(<string>val);\n    }\n\n    onFocus(e: any) {\n        /*jshint validthis: true */\n        e = e || {};\n\n        let valUnmasked = this.unmaskedUIValue;\n        let caretPos = this.getCaretPosition() || 0;\n        let caretPosOld = this.oldCaretPosition || 0;\n        let caretPosDelta = caretPos - caretPosOld;\n        let selectionLenOld = this.oldSelectionLength || 0;\n        let wasSelected = selectionLenOld > 0;\n\n        // Necessary due to \"input\" event not providing a key code\n        let isKeyBackspace = (this.isDeletion() && (caretPosDelta === -1));\n        let isKeyDelete = (this.isDeletion() && (caretPosDelta === 0) && !wasSelected);\n        // Handles cases where caret is moved and placed in front of invalid maskCaretMap position. Logic below\n        // ensures that, on click or leftward caret placement, caret is moved leftward until directly right of\n        // non-mask character. Also applied to click since users are (arguably) more likely to backspace\n        // a character when clicking within a filled input.\n        let caretBumpBack = (isKeyBackspace) && caretPos > this.minCaretPos;\n\n        this.oldSelectionLength = 0;\n\n        if (isKeyBackspace && this.preventBackspace) {\n            this.inputElement.value = this.oldValue;\n            this.setCaretPosition(caretPosOld);\n            return;\n        }\n\n        // Update values\n        this.updateUIValue(valUnmasked, caretBumpBack, caretPos, caretPosOld);\n        this.inputElement.setSelectionRange(0, this.inputElement.value.length);\n        this.oldSelectionLength = this.getSelectionLength();\n    }\n\n    onKeyUp(e: any) {\n        /*jshint validthis: true */\n        e = e || {};\n        var eventType = e.type;\n\n        // Prevent shift and ctrl from mucking with old values\n        if (e.which === 16 || e.which === 91) {\n            return;\n        }\n\n        let valUnmasked = this.unmaskedUIValue;\n        let caretPos = this.getCaretPosition() || 0;\n        let caretPosOld = this.oldCaretPosition || 0;\n        let caretPosDelta = caretPos - caretPosOld;\n        let selectionLenOld = this.oldSelectionLength || 0;\n        let isSelected = this.getSelectionLength() > 0;\n        let isSelection = (e.which >= 37 && e.which <= 40) && e.shiftKey; // Arrow key codes\n\n        let isKeyLeftArrow = e.which === 37;\n        // Necessary due to \"input\" event not providing a key code\n        let isKeyBackspace = e.which === 8;\n        let isKeyDelete = e.which === 46;\n        // Handles cases where caret is moved and placed in front of invalid maskCaretMap position. Logic below\n        // ensures that, on click or leftward caret placement, caret is moved leftward until directly right of\n        // non-mask character. Also applied to click since users are (arguably) more likely to backspace\n        // a character when clicking within a filled input.\n        let caretBumpBack = (isKeyLeftArrow || isKeyBackspace) && caretPos > this.minCaretPos;\n\n        this.oldSelectionLength = this.getSelectionLength();\n\n        // These events don't require any action\n        if (isSelection || isSelected) {\n            return;\n        }\n\n        if (isKeyBackspace && this.preventBackspace) {\n            this.inputElement.value = this.oldValue;\n            this.setCaretPosition(caretPosOld);\n            return;\n        }\n\n        // Update values\n        this.updateUIValue(valUnmasked, caretBumpBack, caretPos, caretPosOld);\n        this._setValue(valUnmasked);\n    }\n\n    updateUIValue(valUnmasked, caretBumpBack, caretPos, caretPosOld) {\n        // Update values\n        let isAddition = this.isAddition();\n        let valMasked = this.masker.maskValue(valUnmasked);\n        let caretPosMin = this.minCaretPos;\n        let caretPosMax = this.masker.maxCaretPos(valUnmasked);\n\n        this.oldValue = valMasked;\n        this.oldValueUnmasked = valUnmasked;\n\n        if(this.isAttached) {\n            this.inputElement.value = valMasked;\n        }\n\n        // Caret Repositioning\n        // ===================\n\n        // Ensure that typing always places caret ahead of typed character in cases where the first char of\n        // the input is a mask char and the caret is placed at the 0 position.\n        if (isAddition && (caretPos <= caretPosMin)) {\n            caretPos = caretPosMin + 1;\n        }\n\n        if (caretBumpBack) {\n            caretPos--;\n        }\n\n        // Make sure caret is within min and max position limits\n        caretPos = caretPos > caretPosMax ? caretPosMax : caretPos < caretPosMin ? caretPosMin : caretPos;\n\n        // Scoot the caret back or forth until it's in a non-mask position and within min/max position limits\n        while (!this.isValidCaretPosition(caretPos) && caretPos > caretPosMin && caretPos < caretPosMax) {\n            caretPos += caretBumpBack ? -1 : 1;\n        }\n\n        if ((caretBumpBack && caretPos < caretPosMax) || (isAddition && !this.isValidCaretPosition(caretPosOld))) {\n            caretPos++;\n        }\n        this.oldCaretPosition = caretPos;\n        this.caretPos = caretPos;\n        this.setCaretPosition(this.caretPos);\n    }\n\n    getSelectionLength() {\n        if (!this.inputElement)\n            return 0;\n        if (this.inputElement.selectionStart !== undefined) {\n            return (this.inputElement.selectionEnd - this.inputElement.selectionStart);\n        }\n        if ((<any>document).selection) {\n            return ((<any>document).selection.createRange().text.length);\n        }\n        return 0;\n    }\n\n    onKeyDown(e: KeyboardEvent) {\n        var isKeyBackspace = e.which === 8;\n        var oldCaretPos = this.getCaretPosition();\n        var newCaretPosOnBksp = oldCaretPos - 1 || 0;\n\n        if (isKeyBackspace) {\n            while (newCaretPosOnBksp >= 0) {\n                if (this.isValidCaretPosition(newCaretPosOnBksp)) {\n                    //re-adjust the caret position.\n                    //Increment to account for the initial decrement to simulate post change\n\n                    this.caretPos = newCaretPosOnBksp;\n                    break;\n                }\n                newCaretPosOnBksp--;\n            }\n            this.preventBackspace = newCaretPosOnBksp === -1;\n        }\n    }\n\n    getCaretPosition() {\n        if (!this.inputElement)\n            return 0;\n        if (this.inputElement.selectionStart !== undefined) {\n            return this.inputElement.selectionStart;\n        } else if ((<any>document).selection) {\n            if (this.isFocused()) {\n                // Curse you IE\n                this.inputElement.focus();\n                var selection = (<any>document).selection.createRange();\n                selection.moveStart('character', this.inputElement.value ? -this.inputElement.value.length : 0);\n                return selection.text.length;\n            }\n        }\n        return 0;\n    }\n\n    isValidCaretPosition(pos): boolean {\n        return this.masker.maskCaretMap.indexOf(pos) > -1;\n    }\n\n    setCaretPosition(pos) {\n        if (!this.inputElement)\n            return 0;\n        if (this.isHidden()) {\n            return; // Input's hidden\n        }\n        if (this.inputElement.setSelectionRange) {\n            if (this.isFocused()) {\n                this.inputElement.focus();\n                this.inputElement.setSelectionRange(pos, pos);\n            }\n        }\n        else if ((<any>this.inputElement).createTextRange) {\n            // Curse you IE\n            var range = (<any>this.inputElement).createTextRange();\n            range.collapse(true);\n            range.moveEnd('character', pos);\n            range.moveStart('character', pos);\n            range.select();\n        }\n    }\n\n    isFocused(): boolean {\n        return this.inputElement === document.activeElement && (!document.hasFocus || document.hasFocus()) &&\n            !!(this.inputElement.type || (<any>this.inputElement).href || ~this.inputElement.tabIndex);\n    }\n\n    isHidden(): boolean {\n        return (this.inputElement.offsetWidth === 0 || this.inputElement.offsetHeight === 0);\n    }\n\n    maskChanged() {\n        this.masker = getMasker({\n            maskFormat: this.mask, \n            bindMasking: this.bindMasking, \n            placeholder: this.placeholder, \n            aspnetMasking: this.aspnetMasking\n        });\n    }\n\n    valueChanged(newv, oldv) {\n        // apparently, the assumption that newv === this.value doesn't hold\n        let valUnmasked = this.getUnmaskedValue(newv);\n        let caretPos = this.getCaretPosition() || 0;\n        let caretPosOld = this.oldCaretPosition || 0;\n        let caretPosDelta = caretPos - caretPosOld;\n        let selectionLenOld = this.oldSelectionLength || 0;\n        let isSelected = this.getSelectionLength() > 0;\n\n        // Handles cases where caret is moved and placed in front of invalid maskCaretMap position. Logic below\n        // ensures that, on click or leftward caret placement, caret is moved leftward until directly right of\n        // non-mask character. Also applied to click since users are (arguably) more likely to backspace\n        // a character when clicking within a filled input.\n        let caretBumpBack = caretPos > this.minCaretPos;\n\n        this.oldSelectionLength = this.getSelectionLength();\n\n        // Update values\n        if(this.editMode === \"overtype\") {\n            let strippedOld = this.masker.stripPlaceholders(oldv);\n            let strippedNew = this.masker.stripPlaceholders(newv);\n            caretBumpBack = caretBumpBack && strippedNew.length < strippedOld.length;\n        }\n        this.updateUIValue(valUnmasked, caretBumpBack, caretPos, caretPosOld);\n        this._setValue(valUnmasked);\n    }\n}\n"]}