{"version":3,"file":"masker.js","sourceRoot":"","sources":["../src/masker.ts"],"names":[],"mappings":"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","sourcesContent":["export function getMasker(options: IMaskOptions): Masker {\n    let maskers : Map<any, Masker> = _maskers;\n    let key = new MaskOptions();\n    key.maskFormat = options.maskFormat;\n    key.placeholder = options.placeholder || \"_\";\n    key.bindMasking = !!options.bindMasking;\n    key.aspnetMasking = !!options.aspnetMasking;\n\n    let strkey = JSON.stringify(key);\n    if (!maskers[strkey]) {\n        maskers[strkey] = new Masker(key);\n    }\n    return maskers[strkey];\n}\n\nexport interface IMaskOptions {\n    maskFormat: string;\n    bindMasking: boolean;\n    placeholder?: string;\n    aspnetMasking?: boolean;\n}\n\nexport class MaskOptions {\n    maskFormat: string;\n    bindMasking: boolean;\n    placeholder: string;\n    aspnetMasking: boolean;\n}\n\n\nvar _maskers = new Map<any, Masker>();\nvar maskDefinitions = {\n    '9': /\\d/,\n    'A': /[a-zA-Z]/,\n    '*': /[a-zA-Z0-9]/\n};\n\nfunction deleteChars(s: string, ch: string): string {\n    if(s == null) {\n        s = \"\";\n    }\n    return s.split(ch).join(\"\");\n}\n\nexport class Masker {\n    maskFormat: string;\n    maskCaretMap: Array<number>;\n    maskPatterns: Array<RegExp>;\n    maskPlaceholder: string;\n    minRequiredLength: number;\n    maskComponents: any;\n    maskProcessed: boolean;\n    bindMasking: boolean;\n    aspnetMasking: boolean;\n    placeholder: string;\n\n    constructor(options: MaskOptions) {\n        this.maskFormat = options.maskFormat;\n        this.bindMasking = options.bindMasking;\n        this.aspnetMasking = options.aspnetMasking;\n        this.maskCaretMap = [];\n        this.maskPatterns = [];\n        this.maskPlaceholder = '';\n        this.minRequiredLength = 0;\n        this.maskComponents = null;\n        this.maskProcessed = false;\n        this.placeholder = options.placeholder;\n        this.processRawMask();\n    }\n\n    unmaskValue(value: string): string {\n        if(this.aspnetMasking) {\n            let result = this._maskValue2(value);\n            return result;\n        }else if(this.bindMasking) {\n            return this._maskValue(value, true);\n        }\n        return this._unmaskValue(value);\n    }\n\n    maskValue(unmaskedValue: string): string {\n        if(this.aspnetMasking) {\n            let result = this._maskValue2(unmaskedValue);\n            return result;\n        //}else if(isNumeric(unmaskedValue)) {\n            //unmaskedValue = \"\"+unmaskedValue;\n        }\n        return this._maskValue(unmaskedValue, false);\n    }\n\n    maxCaretPos(value: string): number {\n        let valueLength = -1;\n        //if(isString(value)) {\n            valueLength = value.length;\n        //}else if(isNumeric(value)) {\n            //valueLength = (\"\"+value).length;\n        //}\n        if(this.aspnetMasking) {\n            let caretPosMax = this.maskCaretMap.slice().pop();\n            return caretPosMax;\n        }else if(this.bindMasking) {\n            if(this.maskCaretMap.indexOf(valueLength) != -1 || \n                valueLength === this.maskFormat.length) {\n                return valueLength;\n            }else {\n                for(var i = 0; i < this.maskCaretMap.length; i++) {\n                    if(this.maskCaretMap[i] > valueLength) \n                    {\n                        return this.maskCaretMap[i];\n                    }\n                }\n                return this.maskCaretMap.slice().shift();\n\n            }\n        }else{\n            let caretPosMax = this.maskCaretMap[valueLength] || this.maskCaretMap.slice().shift();\n            return caretPosMax;\n        }\n    }\n\n    minCaretPos(): number {\n        return this.maskCaretMap[0];\n    }\n\n    _unmaskValue(value): string {\n        var valueUnmasked = '',\n            maskPatternsCopy = this.maskPatterns.slice();\n        // Preprocess by stripping mask components from value\n        value = value.toString();\n        this.maskComponents.forEach(function (component) {\n            value = value.replace(component, '');\n        });\n        value.split('').forEach(function (chr) {\n            if (maskPatternsCopy.length && maskPatternsCopy[0].test(chr)) {\n                valueUnmasked += chr;\n                maskPatternsCopy.shift();\n            }\n        });\n\n        return valueUnmasked;\n    }\n\n    _maskValue(unmaskedValue: string, keepMasking: boolean): string {\n        let input = unmaskedValue || '';\n        var valueMasked = '',\n            maskCaretMapCopy = this.maskCaretMap.slice(),\n            maskPatternsCopy = this.maskPatterns.slice();\n\n        if (keepMasking) {\n            input = this._unmaskValue(input);\n        }\n\n        function putMaybe(chr) {\n            if(!keepMasking || input.length > 0) {\n                valueMasked += chr;\n            }\n        }\n\n        function putNextInput() {\n            valueMasked += input.charAt(0);\n        }\n\n        function nextCharMatches() {\n            return maskPatternsCopy[0].test(input.charAt(0));\n        }\n\n        function advanceInput() {\n            input = input.substr(1);\n        }\n\n        function advanceCaretMap() {\n            maskCaretMapCopy.shift();\n        }\n\n        function advancePatterns() {\n            maskPatternsCopy.shift();\n        }\n\n        this.maskPlaceholder.split('').forEach(function (chr, i) {\n            if (input.length > 0 && i === maskCaretMapCopy[0]) {\n                if(maskPatternsCopy.length) {\n                    while(input.length > 0 && !nextCharMatches()) {\n                        advanceInput();\n                    }\n                }\n                if(maskPatternsCopy.length && nextCharMatches()) {\n                    putNextInput();\n                    advanceCaretMap();\n                    advancePatterns();\n                }else{\n                    putMaybe(chr);\n                    maskCaretMapCopy.shift();\n                }\n                advanceInput();\n            }else{\n                if (input.length > 0 && input.charAt(0) === chr) {\n                    advanceInput();\n                }\n                putMaybe(chr);\n            }\n        });\n        return valueMasked;\n    }\n\n    _maskValue2(unmaskedValue: string) {\n        let input : string;\n        //if(isNumeric(unmaskedValue)) {\n            //input = \"\"+unmaskedValue;\n        //}else{\n            input = unmaskedValue || \"\";\n        //}\n        var valueMasked = '',\n            maskCaretMapCopy = this.maskCaretMap.slice(),\n            maskPatternsCopy = this.maskPatterns.slice();\n        maskCaretMapCopy.pop(); //don't want that last position\n        var placeholder = this.placeholder;\n\n        function putMaybe(chr) {\n            valueMasked += chr;\n        }\n\n        function putNextInput() {\n            valueMasked += input.charAt(0);\n        }\n\n        function nextCharMatches() {\n            if(input.charAt(0) == placeholder) return true;\n            return maskPatternsCopy[0].test(input.charAt(0));\n        }\n\n        function advanceInput() {\n            input = input.substr(1);\n        }\n\n        function advanceCaretMap() {\n            maskCaretMapCopy.shift();\n        }\n\n        function advancePatterns() {\n            maskPatternsCopy.shift();\n        }\n\n        this.maskPlaceholder.split('').forEach(function (chr, i) {\n            if (input.length > 0 && i === maskCaretMapCopy[0]) {\n                if(maskPatternsCopy.length && nextCharMatches()) {\n                    putNextInput();\n                    advanceCaretMap();\n                    advancePatterns();\n                }else{\n                    putMaybe(chr);\n                    maskCaretMapCopy.shift();\n                }\n                advanceInput();\n            }else{\n                while(input.length > 0 && input.charAt(0) === placeholder) {\n                    advanceInput();\n                }\n                if (input.length > 0 && input.charAt(0) === chr) {\n                    advanceInput();\n                }\n                putMaybe(chr);\n            }\n        });\n        return valueMasked;\n    }\n\n    stripPlaceholders(masked) {\n        return deleteChars(masked, this.placeholder);\n    }\n\n    getNextCaretPos(caretPos: number): number {\n        if(this.maskCaretMap.length == 0) {\n            return this.maskFormat.length;\n        }\n        let ix = 0;\n        while(ix < this.maskCaretMap.length-1 && this.maskCaretMap[ix] <= caretPos) {\n            ix++;\n        }\n        return this.maskCaretMap[ix];\n    }\n\n    getPreviousCaretPos(caretPos: number): number {\n        if(this.maskCaretMap.length == 0) {\n            return 0;\n        }\n        let ix = this.maskCaretMap.length-1;\n        while(ix > 0 && this.maskCaretMap[ix] >= caretPos) {\n            ix--;\n        }\n        return this.maskCaretMap[ix];\n    }\n\n    processRawMask() {\n        var characterCount: number = 0;\n        if (isString(this.maskFormat)) {\n\n            var isOptional = false,\n                numberOfOptionalCharacters = 0,\n                splitMask = this.maskFormat.split('');\n\n            splitMask.forEach((chr, i) => {\n                if (maskDefinitions[chr]) {\n\n                    this.maskCaretMap.push(characterCount);\n\n                    this.maskPlaceholder += this.getPlaceholderChar(i - numberOfOptionalCharacters);\n                    this.maskPatterns.push(maskDefinitions[chr]);\n\n                    characterCount++;\n                    if (!isOptional) {\n                        this.minRequiredLength++;\n                    }\n\n                    isOptional = false;\n                }\n                else if (chr === '?') {\n                    isOptional = true;\n                    numberOfOptionalCharacters++;\n                }\n                else {\n                    this.maskPlaceholder += chr;\n                    characterCount++;\n                }\n            });\n        }\n        // Caret position immediately following last position is valid.\n        this.maskCaretMap.push(this.maskCaretMap.slice().pop() + 1);\n\n        this.getMaskComponents();\n        this.maskProcessed = this.maskCaretMap.length > 1 ? true : false;\n    }\n\n\n    getMaskComponents() {\n        var maskPlaceholderChars = this.maskPlaceholder.split(''),\n            maskPlaceholderCopy;\n\n        //maskCaretMap can have bad values if the input has the ui-mask attribute implemented as an observable property, i.e.the demo page\n        if (this.maskCaretMap && !isNaN(this.maskCaretMap[0])) {\n            //Instead of trying to manipulate the RegEx based on the placeholder characters\n            //we can simply replace the placeholder characters based on the already built\n            //maskCaretMap to underscores and leave the original working RegEx to get the pr\n\n            //mask components\n            this.maskCaretMap.forEach((value) => {\n                maskPlaceholderChars[value] = '_';\n            });\n        }\n        maskPlaceholderCopy = maskPlaceholderChars.join('');\n        this.maskComponents = maskPlaceholderCopy.replace(/[_]+/g, '_').split('_');\n    }\n\n\n    getPlaceholderChar(i) {\n        var defaultPlaceholderChar = this.placeholder;\n        return (defaultPlaceholderChar.toLowerCase() === 'space') ? ' ' : defaultPlaceholderChar[0];\n    }\n\n    isValidAt(chr: string, caretPos: number): boolean {\n        let ix = this.maskCaretMap.indexOf(caretPos);\n        if(ix == -1 || ix >= this.maskPatterns.length) return false;\n        let pattern = this.maskPatterns[ix];\n        return pattern.test(chr);\n    }\n}\n\n// from http://stackoverflow.com/a/9436948\nexport function isString(myVar: any) {\n    return (typeof myVar === 'string' || myVar instanceof String);\n}\n\n// from http://stackoverflow.com/a/9716488/23648\nexport function isNumeric(n) {\n  return !isString(n) && !isNaN(parseFloat(n)) && isFinite(n);\n}\n"]}